) +
theme_bw()
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black" ) )
dot
dot <- ggplot( run_pass_df, aes(x=num_run_per_game, y=num_pass_per_game) ) +
geom_point(stat = "identity", size=.5, alpha = .001 ) +
geom_hline(yintercept = mean(run_pass_df$num_pass_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_vline(xintercept =  mean(run_pass_df$num_run_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_nfl_logos(aes(team_abbr = possession_abbr), width = .08, alpha = 0.75)+
labs(title = "Every Team's Average Number of Passes and Runs per Game",
subtitle = "(2022 Season)", x= "Average Number of Runs",
y= "Average Number of Passes") +
theme(
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "black")
) +
theme_bw() +
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black" ) )
dot
dot <- ggplot( run_pass_df, aes(x=num_run_per_game, y=num_pass_per_game) ) +
geom_point(stat = "identity", size=.5, alpha = .001 ) +
geom_hline(yintercept = mean(run_pass_df$num_pass_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_vline(xintercept =  mean(run_pass_df$num_run_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_nfl_logos(aes(team_abbr = possession_abbr), width = .08, alpha = 0.75)+
labs(title = "Every Team's Average Number of Passes and Runs per Game",
subtitle = "(2022 Season)", x= "Average Number of Runs",
y= "Average Number of Passes") +
theme_bw() +
theme(
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "black")
) +
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black" ) )
dot
dot <- ggplot( run_pass_df, aes(x=num_run_per_game, y=num_pass_per_game) ) +
geom_point(stat = "identity", size=.5, alpha = .001 ) +
geom_hline(yintercept = mean(run_pass_df$num_pass_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_vline(xintercept =  mean(run_pass_df$num_run_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_nfl_logos(aes(team_abbr = possession_abbr), width = .08, alpha = 0.75)+
labs(title = "Every Team's Average Number of Passes and Runs per Game",
subtitle = "(2022 Season)", x= "Average Number of Runs",
y= "Average Number of Passes") +
theme_bw() +
theme(
# Remove panel border
#panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "black")
) +
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black" ) )
dot
dot <- ggplot( run_pass_df, aes(x=num_run_per_game, y=num_pass_per_game) ) +
geom_point(stat = "identity", size=.5, alpha = .001 ) +
geom_hline(yintercept = mean(run_pass_df$num_pass_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_vline(xintercept =  mean(run_pass_df$num_run_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_nfl_logos(aes(team_abbr = possession_abbr), width = .08, alpha = 0.75)+
labs(title = "Every Team's Average Number of Passes and Runs per Game",
subtitle = "(2022 Season)", x= "Average Number of Runs",
y= "Average Number of Passes") +
theme_bw() +
theme(
# Remove panel border
#panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "black"),
axis.line.x.bottom = element_line(colour = "black"),
axis.line.y.right = element_line(colour = "black") ) +
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black" ) )
dot
dot <- ggplot( run_pass_df, aes(x=num_run_per_game, y=num_pass_per_game) ) +
geom_point(stat = "identity", size=.5, alpha = .001 ) +
geom_hline(yintercept = mean(run_pass_df$num_pass_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_vline(xintercept =  mean(run_pass_df$num_run_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_nfl_logos(aes(team_abbr = possession_abbr), width = .08, alpha = 0.75)+
labs(title = "Every Team's Average Number of Passes and Runs per Game",
subtitle = "(2022 Season)", x= "Average Number of Runs",
y= "Average Number of Passes") +
theme_bw() +
theme(
# Remove panel border
#panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "black"),
axis.line.x.bottom = element_line(colour = "black"),
axis.line.y.right = element_line(colour = "black") ) +
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
#axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black")
#axis.text.y = element_text(color = "black" )
)
dot
dot <- ggplot( run_pass_df, aes(x=num_run_per_game, y=num_pass_per_game) ) +
geom_point(stat = "identity", size=.5, alpha = .001 ) +
geom_hline(yintercept = mean(run_pass_df$num_pass_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_vline(xintercept =  mean(run_pass_df$num_run_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_nfl_logos(aes(team_abbr = possession_abbr), width = .08, alpha = 0.75)+
labs(title = "Every Team's Average Number of Passes and Runs per Game",
subtitle = "(2022 Season)", x= "Average Number of Runs",
y= "Average Number of Passes") +
theme_bw() +
theme(
# Remove panel border
#panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "black"),
axis.line.x.top = element_line(colour = "black", face="bold"),
axis.line.y.right = element_line(colour = "black") ) +
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
#axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black")
#axis.text.y = element_text(color = "black" )
)
dot <- ggplot( run_pass_df, aes(x=num_run_per_game, y=num_pass_per_game) ) +
geom_point(stat = "identity", size=.5, alpha = .001 ) +
geom_hline(yintercept = mean(run_pass_df$num_pass_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_vline(xintercept =  mean(run_pass_df$num_run_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_nfl_logos(aes(team_abbr = possession_abbr), width = .08, alpha = 0.75)+
labs(title = "Every Team's Average Number of Passes and Runs per Game",
subtitle = "(2022 Season)", x= "Average Number of Runs",
y= "Average Number of Passes") +
theme_bw() +
theme(
# Remove panel border
#panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "black"),
axis.line.x.top = element_line(colour = "black"),
axis.line.y.right = element_line(colour = "black") )
#theme(plot.title = element_text(face="bold", size=16),
#plot.subtitle = element_text(face="bold"),
#axis.title.x = element_text(face="bold"),
#axis.title.y = element_text(face="bold"),
#axis.text.x = element_text(color = "black")
#axis.text.y = element_text(color = "black" ) )
dot
library(tidyverse)
library(lubridate)
data <- read.csv("/Users/garrett/Desktop/nfl_games_pbp.csv")
data <- data %>%
mutate(num = as.integer(gsub("\\D", "", yards_to_endzone)) ) %>%
mutate(abbr = gsub("\\W", "", yards_to_endzone) ) %>%
mutate(abbr = gsub("\\d", "", abbr) )
data <- data %>%
mutate(abbr = str_replace( abbr, "ARZ", "ARI" ) ) %>%
mutate(abbr = str_replace( abbr, "CLV", "CLE" ) ) %>%
mutate(abbr = str_replace( abbr, "BLT", "BAL" ) ) %>%
mutate(abbr = str_replace( abbr, "HST", "HOU" ) ) %>%
mutate(Abbreviation = str_replace( Abbreviation, "LAR", "LA" ) )
data <- data %>%
mutate( yards_to_endzone = ifelse(abbr == Abbreviation, 100 - num, num ) )
data <- data %>%
select( -c('num', 'abbr') ) %>%
rename( possession_abbr = Abbreviation )
data <- data %>%
select( c('game', 'possession_team', 'possession_abbr', 'quarter',
'time', 'shotgun', 'down', 'yards_to_first', 'yards_to_endzone', 'run_pass' ) )
data <- data %>%
mutate( quarter = as.factor(quarter) ) %>%
mutate( shotgun = as.factor(shotgun) ) %>%
mutate( down = as.factor(down) ) %>%
mutate( yards_to_endzone = as.integer(yards_to_endzone) ) %>%
mutate( run_pass = as.factor(run_pass) )
data <- data %>%
mutate( time = ifelse(substr(time, 1, 1) == ":", paste0("0", time), time) )
str(data)
save(data, "/Users/garrett/Desktop/games_pbp.rda")
library(NFLPlayPredictionProject)
library(tidyverse)
library(lubridate)
library(caret)
library(randomForest)
library(glmnet)
library(e1071)
library(caTools)
data <- games_pbp
data_1 <- games_pbp
data_1$time_period <- ms(data_1$time)
data_1$time_seconds <- as.numeric(data_1$time_period, "seconds")
data_1$adjusted_time_seconds <- ifelse(data_1$quarter == 1, data_1$time_seconds + 45 * 60,
ifelse(data_1$quarter == 2, data_1$time_seconds + 30 * 60,
ifelse(data_1$quarter == 3, data_1$time_seconds + 15 * 60, data_1$time_seconds)))
data_1$adjusted_time_period <- seconds_to_period(data_1$adjusted_time_seconds)
data_1$adjusted_time <- format(data_1$adjusted_time_period, "%M:%S")
d_1 <- data_1 %>%
mutate( time = adjusted_time_period ) %>%
select( -c('time_period', 'time_seconds', 'adjusted_time_seconds', 'adjusted_time_period', 'adjusted_time') )
d_1 <- d_1 %>% select( -c('game', 'possession_team', 'possession_abbr') )
d_1$yards_to_first <- as.numeric(d_1$yards_to_first)
d_1$yards_to_endzone <- as.numeric(d_1$yards_to_endzone)
d_1 <- d_1 %>%
mutate( down_yards_to_first = yards_to_first * as.numeric(down)) %>%
mutate( down_yards_to_first_shotgun = down_yards_to_first * as.numeric(shotgun))
# Split the dataset into training and test sets
set.seed(1245)
split <- sample.split(d_1$run_pass, SplitRatio = 0.7)
train <- subset(d_1, split == TRUE)
test <- subset(d_1, split == FALSE)
trControl <- trainControl(method = "cv",
number = 10,
search = "grid")
trControl_1 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
search = "random")
set.seed(12349)
tuneGrid <- expand.grid(.mtry = 3)
rf_2 <- train(run_pass ~ quarter+time+shotgun+down+yards_to_first+yards_to_endzone,
data = train,
method = "rf",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = trControl,
importance = TRUE,
nodesize = 10,
ntree = 10 )
print(rf_2)
set.seed(1234780)
tuneGrid <- expand.grid(.mtry = 3)
rf <- train(run_pass ~ quarter+time+shotgun+down+yards_to_first+yards_to_endzone,
data = train,
method = "rf",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = trControl,
importance = TRUE,
nodesize = 10,
ntree = 10 )
print(rf)
preds <- predict(rf, test)
cm <- confusionMatrix(preds, test$run_pass)
lol <- as.numeric(cm$overall[1])
df<- varImp(rf_2)
df<- df$importance
df$feature <- row.names(df)
df$temp <- df$run
df.45 <- df %>% select( -c('pass', 'run') )
df.45
df2<- varImp(rf)
df2<- df2$importance
df2$feature <- row.names(df2)
df2$importance <- df2$run
df2 <- df2 %>% select( -c('pass', 'run') )
df2
var_imp_data <- df2[0, ]
df.45 <- full_join(df.45, df2, by = "feature")
df.45
var_imp_data <- df2[0, ]
accuracy_list <- list()
for ( i in 1:10 ){
current_seed <- 51307 + i
set.seed(current_seed)
split <- sample.split(d_1$run_pass, SplitRatio = 0.8)
train <- subset(d_1, split == TRUE)
test <- subset(d_1, split == FALSE)
trControl_1 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
search = "random")
set.seed(current_seed)
tuneGrid <- expand.grid(.mtry = 3)
rf_final <- train(run_pass ~ quarter+time+shotgun+down+yards_to_first+yards_to_endzone+
down_yards_to_first+down_yards_to_first_shotgun,
data = train,
method = "rf",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = trControl_1,
importance = TRUE,
nodesize = 10,
ntree = 100 )
preds <- predict(rf_final, test)
cm <- confusionMatrix(preds, test$run_pass)
accuracy <- as.numeric(cm$overall[1])
accuracy_list <- append(accuracy_list, accuracy)
temp_df <- varImp(rf_final)
temp_df <- temp_df$importance
temp_df$feature <- row.names(temp_df)
temp_df$importance <- temp_df$run
temp_df <- temp_df %>% select( -c('pass', 'run') )
var_imp_data <- full_join(var_imp_data, temp_df, by = "feature")
i <- i+1
}
var_imp_data
accuracy_list
acc_df <- as.data.frame(accuracy_list)
rowMeans(acc_df)
var_imp_data_1 <- var_imp_data %>% select( -c('importance.x') )
colnames(var_imp_data_1)
var_imp_data_1$means <- rowMeans(var_imp_data_1[,2:10])
#var_imp_data$error <- std.error(var_imp_data[,2:10])
var_imp_data_1
var_imp_data_1 <- var_imp_data_1 %>% arrange(desc(means))
var_imp_data_1$sd <- apply(var_imp_data_1[,-1], MARGIN = 1, FUN = sd, na.rm = FALSE)
var_imp_data_1
importance_plot <- ggplot(var_imp_data_1, aes(y = reorder(feature, means), x = means) ) +
geom_bar(stat="identity", fill = "#0B610A", color = "black" ) +
#geom_errorbar(aes(ymin = means - sd, ymax = means + sd ), width=.2) +
labs( title = "Variable Importance",
x = "Mean Variable Importance",
y = "Feature in Model" ) +
theme_bw() +
theme(plot.title = element_text(face="bold", size=16),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA) ) +
theme(axis.text.y = element_text( angle = 30 ) ) +
scale_y_discrete(labels=c("down_yards_to_first_shotgun" = "down:yards_to_first:shotgun", "down_yards_to_first" = "down:yards_to_first"))
importance_plot
ggsave('/Users/garrett/Desktop/var_imp.png', importance_plot, bg='transparent',
width = 21, height = 11, units = "in", scale = .4, dpi = 300 )
ggsave('/Users/garrett/Desktop/var_imp.png', importance_plot, bg='transparent',
width = 21, height = 11, units = "in", scale = .4, dpi = 500 )
ggsave('/Users/garrett/Desktop/var_imp.png', importance_plot, bg='transparent',
width = 23, height = 13, units = "in", scale = .4, dpi = 500 )
ggsave('/Users/garrett/Desktop/var_imp.png', importance_plot, bg='transparent',
width = 23, height = 13, units = "in", scale = .45, dpi = 500 )
ggsave('/Users/garrett/Desktop/var_imp.png', importance_plot, bg='transparent',
width = 23, height = 13, units = "in", scale = .375, dpi = 500 )
ggsave('/Users/garrett/Desktop/var_imp.png', importance_plot, bg='transparent',
width = 24, height = 13, units = "in", scale = .375, dpi = 500 )
ggsave('/Users/garrett/Desktop/var_imp.svg', importance_plot, bg='transparent',
width = 24, height = 13, units = "in", scale = .375, dpi = 500 )
library(tidyverse)
library(cowplot)
library(nflplotR)
library(forcats)
data <- read.csv("/Users/garrett/Desktop/GitHub/NFLPlayPredictionProject/raw-data/games_pbp.csv")
view(data)
#str(data)
data <- data %>%
select( -c('X'))
data1 <- data %>%
group_by(game) %>%
summarise(count= n()) %>%
filter(grepl('bears_at_vikings_2022_reg_5', game))
d <- data %>%
group_by(possession_abbr, run_pass) %>%
summarise(count=n())
team_colors <- nflreadr::load_teams()
team_colors <- team_colors %>%
select( c("team_abbr", "team_color") )
d <- inner_join(d, team_colors, by= c("possession_abbr"="team_abbr"))
data_pass <- data %>%
group_by(possession_abbr) %>%
filter(run_pass == "pass") %>%
summarise(pass_count= n())
data_run <- data %>%
group_by(possession_abbr) %>%
filter(run_pass == "run") %>%
summarise(run_count= n())
run_pass_df <- inner_join(data_pass, data_run, by="possession_abbr")
run_pass_df <- run_pass_df %>%
mutate(num_pass_per_game = as.double(round(pass_count/16, 2) )) %>%
mutate(num_run_per_game = as.double(round(run_count/16, 2) ) )
d <- d %>%
mutate(bar_color = ifelse(run_pass == "run", team_color, "grey"))
d_test <- d %>%
group_by( possession_abbr ) %>%
mutate( total = sum(count) ) %>%
ungroup()
d_test <- inner_join(d_test, data_run, by="possession_abbr")
d_test <- d_test %>%
mutate(run_prop = run_count / total) %>%
select( c('possession_abbr', 'run_prop') )
#d <- inner_join(d, d_test, by="possession_abbr")
#d
d$run_prop <- d_test$run_prop
stack <- ggplot(d, aes(x = reorder(possession_abbr, -run_prop), y = count, fill = forcats::fct_rev(bar_color))) +
geom_col(position = "fill") +
scale_fill_identity(guide = "none") +
scale_y_continuous(labels = scales::percent) +
labs(title = "Proportion of Pass and Run Plays for Each Team",
subtitle = "(2022 Season)", x = "", y = "Proportion of Plays",
fill = "Run or Pass") +
theme_bw() +
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black", face = "bold"),
axis.text.y = element_text(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA) ) +
theme(axis.text.x = element_text( angle = 32 ) ) +
annotate( "label", x=28, y=.8, label = "Top: Passes \n Bottom: Runs" )
stack
ggsave('/Users/garrett/Desktop/stack.png', stack, bg='transparent',
width = 21, height = 11, units = "in", scale = .375, dpi = 500 )
scatter <- ggplot( run_pass_df, aes(x=num_run_per_game, y=num_pass_per_game) ) +
geom_point(stat = "identity", size=.5, alpha = .001 ) +
geom_hline(yintercept = mean(run_pass_df$num_pass_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_vline(xintercept =  mean(run_pass_df$num_run_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_nfl_logos(aes(team_abbr = possession_abbr), width = .08, alpha = 0.75)+
labs(title = "Every Team's Average Number of Passes and Runs per Game",
subtitle = "(2022 Season)", x= "Average Number of Runs",
y= "Average Number of Passes") +
theme_bw() +
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA) )
scatter
setwd("~/Desktop/GitHub/NFLPlayPredictionProject/docs")
scatter <- ggplot( run_pass_df, aes(x=num_run_per_game, y=num_pass_per_game) ) +
geom_point(stat = "identity", size=.5, alpha = .001 ) +
geom_hline(yintercept = mean(run_pass_df$num_pass_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_vline(xintercept =  mean(run_pass_df$num_run_per_game), color = "red", linetype = "dashed", alpha=0.8) +
geom_nfl_logos(aes(team_abbr = possession_abbr), width = .08, alpha = 0.75)+
labs(title = "Every Team's Average Number of Passes and Runs per Game",
subtitle = "(2022 Season)", x= "Average Number of Runs",
y= "Average Number of Passes") +
theme_bw() +
theme(plot.title = element_text(face="bold", size=16),
plot.subtitle = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA) )
scatter
ggsave('/Users/garrett/Desktop/logo_plot.png', scatter, bg='transparent',
width = 21, height = 14, units = "in", scale = .375, dpi = 500 )
ggsave('/Users/garrett/Desktop/var_imp.tiff', importance_plot, bg='transparent',
width = 24, height = 13, units = "in", scale = .375, dpi = 500 )
